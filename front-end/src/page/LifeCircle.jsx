/**
 *生命周期
 生命周期函数说白了就是让我们在一个组件的各个阶段都提供一些钩子函数,
 让开发者在合适的时间点可以介入并进行一些操作.
 比如在初始化的时候应该初始化组件相关的状态和变量,组件要销毁时,我们应该把一些数据结构销毁掉来节约内存.
 Java 类中也有一个最常见的钩子函数,constructor,可以在这里调用 super 方法初始化父类,也可以
 在这里初始化各种变量.


 基于路由
 举个 SPA 的例子，比如我们访问 /users，会由 ./src/pages/users.js 决定具体渲染什么，
 按我们的理解，这其中 /users 是路由，./src/pages/users.js 是路由组件，他们俩组成了一个路由配置，
 然后多个路由配置又形成了一个完整的应用。不难发现，在这个应用里，路由即入口。

 umi 是基于路由的,所以具备了管理入口的能力.甚至可以简单地理解 umi=router + webpack
 当然了,在此基础上做了很多额外的工作.管理了入口之后,能做的事情就很多了:
 1.开发时按需编译
 2.运行时按需加载,做 code-spliting
 3.智能提取公共代码,加速用户访问,通常是被 路由数/2 引用的模块才被提取到公共代码中
 4.服务端渲染
 5.基于路由的埋点
 6.基于约定,如果 ./src/pages/404.js 存在则添加为 fallback 路由
 等等等.
 */
